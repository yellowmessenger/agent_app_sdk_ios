// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 effective-4.2 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target armv7-apple-ios8.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name DKPhotoGallery
import AVFoundation
import AVKit
import AssetsLibrary
@_exported import DKPhotoGallery
import FLAnimatedImage
import Foundation
import MobileCoreServices
import PDFKit
import Photos
import SDWebImage
import Swift
import UIKit
import WebKit
@objc @available(iOS 11.0, *)
open class DKPDFView : UIKit.UIView {
  public var url: Foundation.URL? {
    get
    set
  }
  public var document: PDFKit.PDFDocument? {
    get
    set
  }
  final public let openButton: UIKit.UIButton
  @objc dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@objc @_inheritsConvenienceInitializers open class DKPhotoBaseImagePreviewVC : DKPhotoGallery.DKPhotoBasePreviewVC {
  override public func createContentView() -> UIKit.UIView
  override public func updateContentView(with content: Any)
  override public func snapshotImage() -> UIKit.UIImage?
  override public func showError()
  override public func hidesError()
  override public func contentSize() -> CoreGraphics.CGSize
  @available(iOS 9.0, *)
  override public func defaultPreviewActions() -> [UIKit.UIPreviewActionItem]
  override public func defaultLongPressActions() -> [UIKit.UIAlertAction]
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum DKPhotoPreviewType {
  case photo, video
  @available(iOS 11.0, *)
  case pdf
  public static func == (a: DKPhotoGallery.DKPhotoPreviewType, b: DKPhotoGallery.DKPhotoPreviewType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol DKPhotoBasePreviewDataSource : ObjectiveC.NSObjectProtocol {
  func createContentView() -> UIKit.UIView
  func updateContentView(with content: Any)
  func contentSize() -> CoreGraphics.CGSize
  func fetchContent(withProgressBlock progressBlock: @escaping ((Swift.Float) -> Swift.Void), completeBlock: @escaping ((Any?, Swift.Error?) -> Swift.Void))
  func snapshotImage() -> UIKit.UIImage?
  func showError()
  func hidesError()
  func enableZoom() -> Swift.Bool
  func enableIndicatorView() -> Swift.Bool
  @available(iOS 9.0, *)
  func defaultPreviewActions() -> [UIKit.UIPreviewActionItem]
  func defaultLongPressActions() -> [UIKit.UIAlertAction]
  var previewType: DKPhotoGallery.DKPhotoPreviewType { get }
}
@_inheritsConvenienceInitializers @objc open class DKPhotoBasePreviewVC : UIKit.UIViewController, UIKit.UIScrollViewDelegate, DKPhotoGallery.DKPhotoBasePreviewDataSource {
  @objc open var item: DKPhotoGallery.DKPhotoGalleryItem! {
    get
  }
  @objc open var contentView: UIKit.UIView! {
    get
  }
  @objc open var customLongPressActions: [UIKit.UIAlertAction]?
  @objc open var customPreviewActions: [Any]?
  @objc open var singleTapBlock: (() -> Swift.Void)?
  @objc override dynamic open func loadView()
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  open func photoPreviewWillAppear()
  open func photoPreviewWillDisappear()
  open func resetScale()
  open func showTips(_ message: Swift.String)
  open func setNeedsUpdateContent()
  open func prepareForReuse()
  @available(iOS 9.0, *)
  @objc override dynamic open var previewActionItems: [UIKit.UIPreviewActionItem] {
    @objc get
  }
  @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var preferredStatusBarUpdateAnimation: UIKit.UIStatusBarAnimation {
    @objc get
  }
  @objc public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @objc public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  public func createContentView() -> UIKit.UIView
  public func updateContentView(with content: Any)
  public func contentSize() -> CoreGraphics.CGSize
  public func fetchContent(withProgressBlock progressBlock: @escaping ((Swift.Float) -> Swift.Void), completeBlock: @escaping ((Any?, Swift.Error?) -> Swift.Void))
  public func snapshotImage() -> UIKit.UIImage?
  public func showError()
  public func hidesError()
  public func enableZoom() -> Swift.Bool
  public func enableIndicatorView() -> Swift.Bool
  @available(iOS 9.0, *)
  public func defaultPreviewActions() -> [UIKit.UIPreviewActionItem]
  public func defaultLongPressActions() -> [UIKit.UIAlertAction]
  public var previewType: DKPhotoGallery.DKPhotoPreviewType {
    get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class DKPhotoContentAnimationView : UIKit.UIView {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@objc public protocol DKPhotoGalleryDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func photoGallery(_ gallery: DKPhotoGallery.DKPhotoGallery, didShow index: Swift.Int)
}
@objc public protocol DKPhotoGalleryIncrementalDataSource : ObjectiveC.NSObjectProtocol {
  @objc optional func numberOfItems(in gallery: DKPhotoGallery.DKPhotoGallery) -> Swift.Int
  @objc func photoGallery(_ gallery: DKPhotoGallery.DKPhotoGallery, itemsBefore item: DKPhotoGallery.DKPhotoGalleryItem?, resultHandler: @escaping (([DKPhotoGallery.DKPhotoGalleryItem]?, Swift.Error?) -> Swift.Void))
  @objc func photoGallery(_ gallery: DKPhotoGallery.DKPhotoGallery, itemsAfter item: DKPhotoGallery.DKPhotoGalleryItem?, resultHandler: @escaping (([DKPhotoGallery.DKPhotoGalleryItem]?, Swift.Error?) -> Swift.Void))
}
@objc public enum DKPhotoGallerySingleTapMode : Swift.Int {
  case dismiss, toggleControlView
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class DKPhotoGallery : UIKit.UINavigationController, UIKit.UIViewControllerTransitioningDelegate {
  @objc open var items: [DKPhotoGallery.DKPhotoGalleryItem]?
  @objc open var incrementalDataSource: DKPhotoGallery.DKPhotoGalleryIncrementalDataSource?
  @objc open var finishedBlock: ((Swift.Int, DKPhotoGallery.DKPhotoGalleryItem) -> UIKit.UIImageView?)?
  @objc open var presentingFromImageView: UIKit.UIImageView?
  @objc open var presentationIndex: Swift.Int
  @objc open var singleTapMode: DKPhotoGallery.DKPhotoGallerySingleTapMode
  @objc weak open var galleryDelegate: DKPhotoGallery.DKPhotoGalleryDelegate?
  @objc open var customLongPressActions: [UIKit.UIAlertAction]?
  @objc open var customPreviewActions: [Any]?
  @objc open var footerView: UIKit.UIView? {
    @objc get
    @objc set
  }
  open var transitionController: DKPhotoGallery.DKPhotoGalleryTransitionController?
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc open func dismissGallery()
  @objc open func currentContentView() -> UIKit.UIView
  @objc open func currentContentVC() -> DKPhotoGallery.DKPhotoBasePreviewVC
  @objc open func currentIndex() -> Swift.Int
  @objc open func updateNavigation()
  @objc open func handleSingleTap()
  @objc open func toggleControlView()
  @objc open func showsControlView()
  @objc open func hidesControlView()
  @available(iOS 9.0, *)
  @objc override dynamic open var previewActionItems: [UIKit.UIPreviewActionItem] {
    @objc get
  }
  @objc override dynamic open func pushViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc override dynamic open func popViewController(animated: Swift.Bool) -> UIKit.UIViewController?
  public class func setPreferredStatusBarStyle(statusBarStyle: UIKit.UIStatusBarStyle)
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
extension UIViewController {
  @objc dynamic public func present(photoGallery gallery: DKPhotoGallery.DKPhotoGallery, completion: (() -> Swift.Void)? = nil)
}
@_inheritsConvenienceInitializers @objc open class DKPhotoGalleryContentVC : UIKit.UIViewController, UIKit.UIScrollViewDelegate {
  public var pageChangeBlock: ((Swift.Int) -> Swift.Void)?
  public var prepareToShow: ((DKPhotoGallery.DKPhotoBasePreviewVC) -> Swift.Void)?
  open var currentIndex: Swift.Int {
    get
    set
  }
  public var currentVC: DKPhotoGallery.DKPhotoBasePreviewVC {
    get
  }
  public var currentContentView: UIKit.UIView {
    get
  }
  open var footerView: UIKit.UIView? {
    get
    set
  }
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
  @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public let DKPhotoGalleryItemExtraInfoKeyRemoteImageOriginalURL: Swift.String
public let DKPhotoGalleryItemExtraInfoKeyRemoteImageOriginalSize: Swift.String
@_inheritsConvenienceInitializers @objc public class DKPhotoGalleryItemConstant : ObjectiveC.NSObject {
  @objc public class func extraInfoKeyRemoteImageOriginalURL() -> Swift.String
  @objc public class func extraInfoKeyRemoteImageOriginalSize() -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc open class DKPhotoGalleryItem : ObjectiveC.NSObject {
  @objc open var thumbnail: UIKit.UIImage?
  @objc open var image: UIKit.UIImage?
  @objc open var imageURL: Foundation.URL?
  @objc open var videoURL: Foundation.URL?
  @objc open var pdfURL: Foundation.URL?
  @objc open var asset: Photos.PHAsset?
  @objc open var assetLocalIdentifier: Swift.String?
  @objc open var extraInfo: [Swift.String : Any]?
  @objc convenience public init(image: UIKit.UIImage)
  @objc convenience public init(imageURL: Foundation.URL)
  @objc convenience public init(videoURL: Foundation.URL)
  @available(iOS 11.0, *)
  @objc convenience public init(pdfURL: Foundation.URL)
  @objc convenience public init(asset: Photos.PHAsset)
  @objc public class func items(withImageURLs URLs: [Foundation.URL]) -> [DKPhotoGallery.DKPhotoGalleryItem]
  @objc public class func items(withImageURLStrings URLStrings: [Swift.String]) -> [DKPhotoGallery.DKPhotoGalleryItem]
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class DKPhotoGalleryResource {
  public class func localizedStringWithKey(_ key: Swift.String, value: Swift.String? = nil) -> Swift.String
  @objc public static var customLocalizationBlock: ((Swift.String) -> Swift.String?)?
  public class func downloadFailedImage() -> UIKit.UIImage
  public class func closeVideoImage() -> UIKit.UIImage
  public class func videoPlayImage() -> UIKit.UIImage
  public class func videoToolbarPlayImage() -> UIKit.UIImage
  public class func videoToolbarPauseImage() -> UIKit.UIImage
  public class func videoPlayControlBackgroundImage() -> UIKit.UIImage
  public class func videoTimeSliderImage() -> UIKit.UIImage
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class DKPhotoGalleryTransitionController : UIKit.UIPresentationController, UIKit.UIViewControllerTransitioningDelegate {
  open var gallery: DKPhotoGallery.DKPhotoGallery!
  @objc public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc public func interactionControllerForDismissal(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @objc public func interactionControllerForPresentation(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @objc override dynamic public init(presentedViewController: UIKit.UIViewController, presenting presentingViewController: UIKit.UIViewController?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class DKPhotoGalleryTransitionDismiss : ObjectiveC.NSObject, UIKit.UIViewControllerAnimatedTransitioning {
  @objc open func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @objc open func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class DKPhotoGalleryTransitionPresent : ObjectiveC.NSObject, UIKit.UIViewControllerAnimatedTransitioning {
  @objc open func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @objc open func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @objc override dynamic public init()
  @objc deinit
}
@objc open class DKPhotoImageView : FLAnimatedImage.FLAnimatedImageView {
  @objc override dynamic public init(image: UIKit.UIImage? = nil, highlightedImage: UIKit.UIImage? = nil)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(image: UIKit.UIImage?)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
public enum DKPhotoIncrementalIndicatorDirection {
  case left, right
  public static func == (a: DKPhotoGallery.DKPhotoIncrementalIndicatorDirection, b: DKPhotoGallery.DKPhotoIncrementalIndicatorDirection) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers @available(iOS 11.0, *)
open class DKPhotoPDFPreviewVC : DKPhotoGallery.DKPhotoBasePreviewVC {
  public var closeBlock: (() -> Swift.Void)?
  public var autoHidesControlView: Swift.Bool
  public var tapToToggleControlView: Swift.Bool
  public var beginPlayBlock: (() -> Swift.Void)?
  override open func prepareForReuse()
  override open func createContentView() -> UIKit.UIView
  override open func contentSize() -> CoreGraphics.CGSize
  override open func fetchContent(withProgressBlock progressBlock: @escaping ((Swift.Float) -> Swift.Void), completeBlock: @escaping ((Any?, Swift.Error?) -> Swift.Void))
  override open func updateContentView(with content: Any)
  override open func enableZoom() -> Swift.Bool
  override public func enableIndicatorView() -> Swift.Bool
  override open var previewType: DKPhotoGallery.DKPhotoPreviewType {
    get
  }
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class DKPhotoPlayerPreviewVC : DKPhotoGallery.DKPhotoBasePreviewVC {
  public var closeBlock: (() -> Swift.Void)?
  public var autoHidesControlView: Swift.Bool
  public var tapToToggleControlView: Swift.Bool
  public var beginPlayBlock: (() -> Swift.Void)?
  public var isControlHidden: Swift.Bool {
    get
    set
  }
  @objc deinit
  override open func photoPreviewWillAppear()
  override open func photoPreviewWillDisappear()
  override open func prepareForReuse()
  override open func createContentView() -> UIKit.UIView
  override open func contentSize() -> CoreGraphics.CGSize
  override open func fetchContent(withProgressBlock progressBlock: @escaping ((Swift.Float) -> Swift.Void), completeBlock: @escaping ((Any?, Swift.Error?) -> Swift.Void))
  override open func updateContentView(with content: Any)
  override open func enableZoom() -> Swift.Bool
  override public func enableIndicatorView() -> Swift.Bool
  override open var previewType: DKPhotoGallery.DKPhotoPreviewType {
    get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc extension DKPhotoBasePreviewVC {
  @objc dynamic public class func photoPreviewClass(with item: DKPhotoGallery.DKPhotoGalleryItem) -> DKPhotoGallery.DKPhotoBasePreviewVC.Type
  @objc dynamic public class func photoPreviewVC(with item: DKPhotoGallery.DKPhotoGalleryItem) -> DKPhotoGallery.DKPhotoBasePreviewVC
}
public protocol DKPhotoProgressIndicatorProtocol : ObjectiveC.NSObjectProtocol {
  init(with view: UIKit.UIView)
  func startIndicator()
  func stopIndicator()
  func setIndicatorProgress(_ progress: Swift.Float)
}
@objc open class DKPlayerView : UIKit.UIView {
  public var url: Foundation.URL? {
    get
    set
  }
  public var asset: AVFoundation.AVAsset? {
    get
    set
  }
  public var playerItem: AVFoundation.AVPlayerItem? {
    get
    set
  }
  public var closeBlock: (() -> Swift.Void)? {
    get
    set
  }
  public var beginPlayBlock: (() -> Swift.Void)?
  public var isControlHidden: Swift.Bool {
    get
    set
  }
  public var isPlaying: Swift.Bool {
    get
  }
  public var autoHidesControlView: Swift.Bool
  public var tapToToggleControlView: Swift.Bool {
    get
    set
  }
  public var isFinishedPlaying: Swift.Bool
  final public let playButton: UIKit.UIButton
  @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  public init(frame: CoreGraphics.CGRect, controlParentView: UIKit.UIView?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc public func playAndHidesControlView()
  public func play()
  @objc public func pause()
  public func stop()
  public func updateContextBackground(alpha: CoreGraphics.CGFloat)
  public func reset()
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension DKPhotoGallery.DKPhotoPreviewType : Swift.Equatable {}
extension DKPhotoGallery.DKPhotoPreviewType : Swift.Hashable {}
extension DKPhotoGallery.DKPhotoGallerySingleTapMode : Swift.Equatable {}
extension DKPhotoGallery.DKPhotoGallerySingleTapMode : Swift.Hashable {}
extension DKPhotoGallery.DKPhotoGallerySingleTapMode : Swift.RawRepresentable {}
extension DKPhotoGallery.DKPhotoIncrementalIndicatorDirection : Swift.Equatable {}
extension DKPhotoGallery.DKPhotoIncrementalIndicatorDirection : Swift.Hashable {}
